
import { Button } from "@mantine/core";

export default function PaymentButton ( props ) {

    const {product, cartQuantities} = props;

    const handlePaymentClick = (e) => {
        e.stopPropagation();

        // The Public RazorPay Key
        const RAZORPAY_KEY_ID = 'rzp_test_YlUJoLwv4dRHpk'; 

        let amount = (product.price * 86.8105) * 100;

        if(cartQuantities[product.id] > 1) {
            amount = (((product.price * cartQuantities[product.id]) * 86.8105) * 100 )
        }

        // Options are basically passed as an object
        const options = {
            key: RAZORPAY_KEY_ID,
            amount: amount,
            currency: 'INR',
            name: 'Meraki Market',    // Name shown on the payment modal
            description: `Payment for ${product.title}`,
            image: `${product.images[0]}`, 
            
            // Optional: Your store logo URL
            // 'order_id' is typically generated by your backend. Since we have no backend,
            // we are skipping this, which means no server-side order tracking or verification.
            // order_id: 'order_xxxxxxxxxxxxxx', 

            handler: function (response) {
                // This function is called when the payment modal is closed (successfully or otherwise).
                // In a real application, you would send these `response` details to your backend
                // for secure verification using your Razorpay Key Secret.
                // Since this is a demo, we just log and show an alert.

                console.log("Razorpay Response:", response);

                if (response.razorpay_payment_id) {
                    alert(`Payment Success! Payment ID: ${response.razorpay_payment_id}`);
                    // Here you would typically redirect the user to a success page
                    // or update your UI to show the order as placed.
                } 
                else {
                    // This part might not be triggered directly for a simple closure without payment,
                    // but good to have for understanding potential errors.
                    alert("Payment flow completed (or closed). No actual payment processed.");
                }
            },
            prefill: {
                // Optional: pre-fill customer details for a smoother experience
                name: 'User',
                email: 'demo@gmail.com',
                contact: '9999999999',
            },
            notes: {
                address: 'Pradyun & Co',
            },
            theme: {
                color: 'black',
            },
        };

        // Create a new Razorpay instance and open the checkout modal
        const rzp1 = new window.Razorpay(options);
        rzp1.open();

        // Optional: Listen for payment failures if you want to show a more specific error
        rzp1.on('payment.failed', function (response) {
            console.error("Razorpay Payment Failed:", response.error);
            alert(`Payment Failed: ${response.error.description || 'Unknown error'}`);
            // You might want to log this error to your console for debugging
        });
    };

    return (
        <Button
            color="orange" 
            fullWidth radius="md"
            style={{color: 'black', border: '2px solid black', cursor: 'pointer'}}
            onClick={handlePaymentClick}
        >       
            Buy Now
        </Button>
    );
}